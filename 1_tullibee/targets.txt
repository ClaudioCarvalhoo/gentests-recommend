Class, Method, Line, LineContent, Observation, Diagnosis, Action

com.ib.client.EReader, run, 97, "if (stopRequested) {",
every call to run() results in NPE on variable of type DataInputStream,  Unable to create (non-null) DataInputStream, added new object

      public static DataInputStream disOne() {
        return new DataInputStream(new StringBufferInputStream("123"));
      }

com.ib.client.EWrapper, stopRequested, 72, "stopRequested()",
every call to run() results in NPE on variable of type EWrapper, Unable to create (non-null) EWrapper, added new object


      public static EWrapper eWrapperOne() { return new ...}

com.ib.client.EReader, readStr, 902, "if (c == 0) {", every call to
readStr(DataInputStream) raises java.io.Exception captured at EReader.run:102, DataInputStream object with invalid data, modified string 

      public static DataInputStream disOne() {
        return new DataInputStream(new StringBufferInputStream("123\0"));
      }


com.ib.client.EReader, processMsg, 114, "case TICK_PRICE: {", every
call to processMsg(123) raises com.ib.client.EException captured at EReader.run:102, DataInputStream with invalid data, modified string

      public static DataInputStream disOne() {
        return new DataInputStream(new StringBufferInputStream("1\0"));
      }

com.ib.client.EReader, processMsg, 123, "int canAutoExecute = 0;",
every call to processMsg(1) raises java.io.Exception captured at EReader.run:102, DataInputStream with invalid data, modified string

                      
      public static DataInputStream disOne() {
        // Expressing these \0s in a single string does not work. It thinks "\03" is the string "\3" or something.
        String all = "1" + "\0" + "2" + "\0" + "3" + "\0" + "4" + "\0" + "2.97" + "\0";
        return new DataInputStream(new StringBufferInputStream(all));
      }

com.ib.client.EReader, processMsg, 844, "case CONTRACT_DATA_END: {",
case never reached beacuse of missing matching id, DataInputStream with invalid data, created a new DataInputStream function
to start with 52

      public static DataInputStream disOne() {
		String action = "52";
		String part1 = "2";
		String part2 = "3";
		String all = action + "\0" + part1 + "\0" + part2 + "\0";
		return new DataInputStream(new StringBufferInputStream(all));
	}

com.ib.client.EReader, processMsg, 850, "case OPEN_ORDER_END: {",
case never reached beacuse of missing matching id, DataInputStream with invalid data, created a new DataInputStream function
to start with 53 and an integer

      public static DataInputStream disTwo() {
		String action = "53";
		String part1 = "2";
		String all = action + "\0" + part1 + "\0";
		return new DataInputStream(new StringBufferInputStream(all));
	}

com.ib.client.EReader, processMsg, 852, "eWrapper().openOrderEnd();",
eWrapper generated as null by default, eWrapper as null pointer, created a new EReader factory providing same
DataInputStream and valid EWrapper

      public static EReader eReaderOne() {
		return new com.ib.client.EReader(disTwo(), eWrapperOne(), 44);
	}

com.ib.client.EReader, processMsg, 847, "eWrapper().contractDetailsEnd(reqId);",
eWrapper generated as null by default, eWrapper as null pointer, created a new EReader factory providing the old
DataInputStream (disOne()) and valid EWrapper

	public static EReader eReaderTwo() {
		return new com.ib.client.EReader(disOne(), eWrapperOne(), 44);
	}

com.ib.client.EReader, processMsg, 847, "eWrapper().contractDetailsEnd(reqId);",
eWrapper generated but never reached line 847, EReader.run() never called, added .run() call to each method

      public static void eReaderOne() {
		new com.ib.client.EReader(disTwo(), eWrapperOne(), 44).run();
	}

	public static void eReaderTwo() {
		new com.ib.client.EReader(disOne(), eWrapperOne(), 44).run();
	}

com.ib.client.EReader, processMsg, 671, "case EXECUTION_DATA: {",
case never reached beacuse of missing matching id, msgId != 11, added new EReader.run() matching properties

      public static void eReaderThree() {
		String answer = "11" + "\0" + "7" + "\0";
		for(int i = 0; i < 22; i++) {
			answer += "11" + "\0";
		}
		new com.ib.client.EReader(new DataInputStream(new StringBufferInputStream(answer)), eWrapperOne(), 44).run();
	}